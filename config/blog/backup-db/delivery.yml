apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-db
  annotations:
    kapp.k14s.io/update-strategy: fallback-on-replace
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: backup-db
    apps.tanzu.vmware.com/workload-type: cronjob
    kapp.k14s.io/app: "1673062250001482428"
    kapp.k14s.io/association: v1.4e043a1fa1e762f9e99e68cc4f600214
    app.kubernetes.io/component: run
    carto.run/workload-name: backup-db
spec:
  schedule: 0 15 * * ?
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: backup-db
        apps.tanzu.vmware.com/workload-type: cronjob
        carto.run/workload-name: backup-db
        kapp.k14s.io/app: "1673062250001482428"
        kapp.k14s.io/association: v1.4e043a1fa1e762f9e99e68cc4f600214
    spec:
      backoffLimit: 0
      template:
        metadata:
          annotations:
            conventions.carto.run/applied-conventions: |-
              spring-boot-convention/auto-configure-actuators-check
              spring-boot-convention/app-live-view-appflavour-check
              appliveview-sample/app-live-view-appflavour-check
            developer.conventions/target-containers: workload
            kapp.k14s.io/identity: v1;blog/carto.run/Workload/backup-db;carto.run/v1alpha1
            kapp.k14s.io/original: '{"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"labels":{"app.kubernetes.io/part-of":"backup-db","apps.tanzu.vmware.com/workload-type":"cronjob","kapp.k14s.io/app":"1673062250001482428","kapp.k14s.io/association":"v1.4e043a1fa1e762f9e99e68cc4f600214"},"name":"backup-db","namespace":"blog"},"spec":{"image":"ghcr.io/categolj/psql-backup:latest","params":[{"name":"schedule","value":"0 15 * * ?"},{"name":"gitops_branch","value":"kiwi"},{"name":"command","value":["/bin/bash"]},{"name":"args","value":["-c","set -eo pipefail\nmc config host add backup_host ${AWS_S3_HOST} ${AWS_ACCESS_KEY} ${AWS_ACCESS_SECRET}\necho \"Backup Started!\"\npg_dump -U ${DB_USER} -h ${DB_HOST} -p ${DB_PORT} ${DB_NAME} | mc pipe backup_host/${AWS_BUCKET_NAME}/$(date +\"%Y\")/$(date +\"%m\")/$(date +\"%d\")/backup-$(date +\"%Y-%m-%d-%H-%M\").sql\necho \"Backup Finished!\""]},{"env":[{"name":"AWS_S3_HOST","valueFrom":{"secretKeyRef":{"key":"host","name":"backup-s3"}}},{"name":"AWS_ACCESS_KEY","valueFrom":{"secretKeyRef":{"key":"access_key","name":"backup-s3"}}},{"name":"AWS_ACCESS_SECRET","valueFrom":{"secretKeyRef":{"key":"access_secret","name":"backup-s3"}}},{"name":"AWS_BUCKET_NAME","value":"backup-blog-db"},{"name":"DB_USER","valueFrom":{"secretKeyRef":{"key":"username","name":"blog-db"}}},{"name":"DB_HOST","valueFrom":{"secretKeyRef":{"key":"host","name":"blog-db"}}},{"name":"DB_PORT","valueFrom":{"secretKeyRef":{"key":"port","name":"blog-db"}}},{"name":"DB_NAME","valueFrom":{"secretKeyRef":{"key":"database","name":"blog-db"}}},{"name":"PGPASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"blog-db"}}}],"name":"testing_pipeline_matching_labels","value":{"apps.tanzu.vmware.com/language":"skip","apps.tanzu.vmware.com/pipeline":"test"}}]}}'
            kapp.k14s.io/original-diff-md5: e08e39f6853caf1d9a5b623a12a90a04
          labels:
            app.kubernetes.io/component: run
            app.kubernetes.io/part-of: backup-db
            apps.tanzu.vmware.com/workload-type: cronjob
            carto.run/workload-name: backup-db
            kapp.k14s.io/app: "1673062250001482428"
            kapp.k14s.io/association: v1.4e043a1fa1e762f9e99e68cc4f600214
        spec:
          containers:
          - image: ghcr.io/categolj/psql-backup@sha256:2f45595728754a734103b89a744ae9c1fd8479c4b6a892b95dc5c5de6df46c3e
            name: workload
            resources: {}
            securityContext:
              runAsUser: 1000
            command:
            - /bin/bash
            args:
            - -c
            - |-
              set -eo pipefail
              mc config host add backup_host ${AWS_S3_HOST} ${AWS_ACCESS_KEY} ${AWS_ACCESS_SECRET}
              echo "Backup Started!"
              pg_dump -U ${DB_USER} -h ${DB_HOST} -p ${DB_PORT} ${DB_NAME} | mc pipe backup_host/${AWS_BUCKET_NAME}/$(date +"%Y")/$(date +"%m")/$(date +"%d")/backup-$(date +"%Y-%m-%d-%H-%M").sql
              echo "Backup Finished!"
          serviceAccountName: default
          restartPolicy: Never

